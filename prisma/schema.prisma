// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

enum MessageStatus {
  PENDING
  SENT
  FAILED
}

// Contacts (recipients)
model Contact {
  id           Int              @id @default(autoincrement())
  emailAddress String           @unique @map("email_address")
  displayName  String?          @map("display_name")
  createdAt    DateTime         @default(now()) @map("created_at")
  messages     Message[]
  optOuts      TemplateOptOut[]

  @@map("contacts")
}

// Projects for organizing templates
model Project {
  id          Int        @id @default(autoincrement())
  key         String     @unique @map("key")
  displayName String     @map("display_name")
  description String?
  isActive    Boolean    @default(true) @map("is_active")
  createdAt   DateTime   @default(now()) @map("created_at")
  updatedAt   DateTime   @updatedAt @map("updated_at")
  templates   Template[]

  @@map("projects")
}

// Templates for all types of emails
model Template {
  id          Int              @id @default(autoincrement())
  project     Project          @relation(fields: [projectId], references: [id])
  projectId   Int              @map("project_id")
  key         String           @map("key")
  displayName String           @map("display_name")
  description String?
  subject     String
  bodyHtml    String           @map("body_html")
  bodyText    String           @map("body_text")
  isActive    Boolean          @default(true) @map("is_active")
  createdAt   DateTime         @default(now()) @map("created_at")
  updatedAt   DateTime         @updatedAt @map("updated_at")
  messages    Message[]
  optOuts     TemplateOptOut[]

  @@unique([projectId, key])
  @@map("templates")
}

// Messages sent to contacts
model Message {
  id           Int           @id @default(autoincrement())
  contact      Contact       @relation(fields: [contactId], references: [id])
  contactId    Int           @map("contact_id")
  template     Template?     @relation(fields: [templateId], references: [id])
  templateId   Int?          @map("template_id")
  status       MessageStatus @default(PENDING)
  errorDetails String?       @map("error_details")
  variables    String? // JSON string for template variables
  externalId   String?       @map("external_id")
  createdAt    DateTime      @default(now()) @map("created_at")
  sentAt       DateTime?     @map("sent_at")

  @@map("messages")
}

// Opted out emails, m-n relation between contacts and tempaltes.
model TemplateOptOut {
  id         Int      @id @default(autoincrement())
  contact    Contact  @relation(fields: [contactId], references: [id])
  contactId  Int      @map("contact_id")
  template   Template @relation(fields: [templateId], references: [id])
  templateId Int      @map("template_id")
  reason     String?  @map("reason")
  createdAt  DateTime @default(now()) @map("created_at")

  @@unique([contactId, templateId])
  @@map("template_optouts")
}
